pipeline {
    agent any

    environment {
        NODE_ENV = "production"
        DEPLOY_SERVER = "user@your-server-ip"

        // Docker Registry 설정
        DOCKER_REGISTRY = "${env.CUSTOM_DOCKER_REGISTRY}"
        DOCKER_CREDENTIALS = "${env.CUSTOM_DOCKER_CREDENTIALS}"
        DOCKER_IMAGE = 'mangler/docgen-backend'
        CONTAINER_NAME = 'mangler-docgen-backend'
        DOCKERFILE_PATH = "deploy/Dockerfile"   // Dockerfile 경로
    }

    tools {
        nodejs 'node-v20.19.4'
    }

    stages {
        stage('📥 Checkout') {
            steps {
                echo "📥 Git 저장소에서 코드 가져오기"
                git branch: 'main', url: 'https://github.com/AICC-Mangler/docgen-backend.git'
            }
        }

        stage('📦 Install Dependencies') {
            steps {
                sh '''
                    echo "📦 의존성 설치 시작"
                    rm -rf node_modules dist

                    # CI/CD 환경에서 안전한 의존성 설치
                    npm ci --include=dev --no-audit --no-fund --prefer-offline --progress=false

                    echo "✅ 의존성 설치 완료"

                    echo "📋 NestJS CLI 확인:"
                    ls -la node_modules/.bin/nest || echo "NestJS CLI 바이너리 확인 실패"

                    echo "📋 TypeScript 확인:"
                    ls -la node_modules/.bin/tsc || echo "TypeScript 바이너리 확인 실패"
                '''
            }
        }

        stage('🏗️ Build NestJS') {
            steps {
                sh '''
                    echo "🏗️ NestJS 빌드 시작"
                    npm run build
                    echo "✅ 빌드 완료 (dist 폴더 생성됨)"
                '''
            }
        }

        stage('🧪 Test') {
            steps {
                sh '''
                    echo "🧪 테스트 실행"
                    npm run test || echo "⚠️ 테스트 실패 (무시하려면 여기서 처리)"
                '''
            }
        }

        stage('🐳 Docker Build') {
            steps {
                script {
                    try {
                        echo "🐳 Docker 이미지 빌드 시작"

                        def app = docker.build("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}", "-f ${DOCKERFILE_PATH} .")

                        // 빌드 성공 시 환경 변수 설정
                        env.DOCKER_BUILD_SUCCESS = 'true'
                        env.DOCKER_IMAGE_TAG = "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"

                        echo "✅ Docker 이미지 빌드 성공"
                        echo "📦 이미지 태그: ${env.DOCKER_IMAGE_TAG}"

                    } catch (Exception e) {
                        env.DOCKER_BUILD_SUCCESS = 'false'
                        error "❌ Docker 빌드 실패: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('📤 Push Docker Image') {
            when {
                environment name: 'DOCKER_BUILD_SUCCESS', value: 'true'
            }
            steps {
                script {
                    try {
                        docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS}") {
                            def app = docker.image("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}")
                            app.push("${BUILD_NUMBER}")

                            // main 브랜치는 latest 태그도 푸시
                            def currentBranch = env.GIT_BRANCH ?: 'develop'
                            if (currentBranch.contains('main')) {
                                app.push("latest")
                                echo "✅ latest 태그 푸시 완료"
                            }
                        }

                        env.DOCKER_PUSH_SUCCESS = 'true'
                        echo "✅ Docker 이미지 푸시 성공: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    } catch (Exception e) {
                        env.DOCKER_PUSH_SUCCESS = 'false'
                        echo "❌ Docker Registry 인증 또는 푸시 실패: ${e.getMessage()}"
                        echo "🔍 Docker Registry: ${DOCKER_REGISTRY}"
                        echo "🔍 Credentials ID: ${DOCKER_CREDENTIALS}"
                        error "Docker 푸시 실패: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    

    post {
        success {
            echo "✅ Pipeline 성공적으로 완료"
        }
        failure {
            echo "❌ Pipeline 실패"
        }
    }
}